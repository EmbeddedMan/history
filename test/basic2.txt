
### platform MCF52221 ###
... testing help
Welcome to StickOS for Freescale MCF52221 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help variables
  help pins
  help board
  help clone
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF52221 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
clone [run]                   -- clone flash to slave MCU [and run]
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete [<line>][-][<line>]    -- delete program lines or <subname>
download <slave Hz>           -- download for relay to QSPI to EzPort
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list [<line>][-][<line>]      -- list program lines or <subname>
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile [<line>][-][<line>]   -- like list, but display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>]                 -- save code ram to flash memory
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
autorun [on|off]                  -- autorun (on reset) mode
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
sleep [on|off]                    -- debugger sleep mode
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*   clone_rst*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line> <statement>                     -- enter program line into code ram

assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[[n]] [as ...] [, ...]   -- dimension variables
end                                    -- end program
label <label>                          -- read/data label
let <variable> = <expression> [, ...]  -- assign variable
print ("string"|<expression>) [, ...]  -- print strings/expressions
qspi <variable> [, ...]                -- perform qspi I/O by reference
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code

for more information:
  help blocks
  help devices
  help expressions
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference
array variable indices start at 0; v[0] is the same as v

ram variables:
  dim <var>[[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables:
  nodeid    msecs     seconds   ticks     ticks_per_msec      (read-only)

for more information:
  help pins
pin names:
    0         1         2         3        4     5        6        7
  --------  --------- --------- -------- ----- -------- -------- ------+
  an0       an1       an2       an3      an4   an5      an6      an7   | AN
  scl       sda                                                        | AS
            irq1*                        irq4*                   irq7* | NQ
  qspi_dout qspi_din  qspi_clk  qspi_cs0       qspi_cs2 qspi_cs3       | QS
  dtin0     dtin1     dtin2     dtin3                                  | TC
  utxd0     urxd0     urts0*    ucts0*                                 | UA
  utxd1     urxd1     urts1*    ucts1*                                 | UB

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
dtin? = potential analog output (PWM) pins (mV)
dtin? = potential servo output (PWM) pins (cms)
dtin? = potential frequency output pins (Hz)
urxd? = potential uart input pins (received byte)
utxd? = potential uart output pins (transmit byte)
                1  2  3  4  5  6  7  8  9  10 11 12 13 14

                g  +  u  u  u  u  u  u  u  u  i  i  i  +
                n  3  c  r  r  t  c  r  r  t  r  r  r  5
                d  V  t  t  x  x  t  t  x  x  q  q  q  V
                      s  s  d  d  s  s  d  d  7  4  1
1  gnd                0  0  0  0  1  1  1  1  *  *  *
2  +3V                *  *        *  *
3  rsti*
4  scl
5  sda
6  qspi_din
7  qspi_dout
8  qspi_clk
9  qspi_cs0           d  d  d  d
10 rcon*/irq4*        t  t  t  t
                g  +  i  i  i  i  a  a  a  a  a  a  a  a
                n  3  n  n  n  n  n  n  n  n  n  n  n  n
                d  V  3  2  1  0  0  1  2  3  4  5  6  7

                1  2  3  4  5  6  7  8  9  10 11 12 13 14
clone cable:
  master           slave
  ---------        ----------------
  qspi_clk         qspi_clk (ezpck)
  qspi_din         qspi_dout (ezpq)
  qspi_dout        qspi_din (ezpd)
  qspi_cs0         rcon* (ezpcs*)
  pins clone_rst*  rsti*
  vss              vss
  vdd              vdd
connect <nodeid>              -- connect to MCU <nodeid> via zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  qspi_clk             spiclk
  qspi_din             miso
  qspi_dout            mosi
  irq4*                irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
... testing pins
Welcome to StickOS for Freescale MCF52221 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat dtin3
safemode* irq1*
qspi_cs* qspi_cs0
clone_rst* scl
zigflea_rst* an2
zigflea_attn* an3
zigflea_rxtxen an5
... testing jm commands
Welcome to StickOS for Freescale MCF52221 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
    ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
end
... testing ipaddress
Welcome to StickOS for Freescale MCF52221 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
... testing reset
Welcome to StickOS for Freescale MCF52221 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform MCF52233 ###
... testing help
Welcome to StickOS for Freescale MCF52233 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help variables
  help pins
  help clone
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF52233 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
clone [run]                   -- clone flash to slave MCU [and run]
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete [<line>][-][<line>]    -- delete program lines or <subname>
download <slave Hz>           -- download for relay to QSPI to EzPort
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list [<line>][-][<line>]      -- list program lines or <subname>
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile [<line>][-][<line>]   -- like list, but display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>]                 -- save code ram to flash memory
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
autorun [on|off]                  -- autorun (on reset) mode
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
ipaddress [dhcp|<ipaddress>]      -- set/display ip address
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
sleep [on|off]                    -- debugger sleep mode
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*   clone_rst*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line> <statement>                     -- enter program line into code ram

assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[[n]] [as ...] [, ...]   -- dimension variables
end                                    -- end program
label <label>                          -- read/data label
let <variable> = <expression> [, ...]  -- assign variable
print ("string"|<expression>) [, ...]  -- print strings/expressions
qspi <variable> [, ...]                -- perform qspi I/O by reference
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code

for more information:
  help blocks
  help devices
  help expressions
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference
array variable indices start at 0; v[0] is the same as v

ram variables:
  dim <var>[[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables:
  nodeid    msecs     seconds   ticks     ticks_per_msec      (read-only)

for more information:
  help pins
pin names:
    0         1         2         3        4     5        6        7
  --------  --------- --------- -------- ----- -------- -------- ------+
  an0       an1       an2       an3      an4   an5      an6      an7   | AN
  scl       sda                                                        | AS
  gpt0      gpt1      gpt2      gpt3                                   | TA
            irq1*                        irq4*                   irq7* | NQ
                                irq11*                                 | GP
  qspi_dout qspi_din  qspi_clk  qspi_cs0       qspi_cs2 qspi_cs3       | QS
  dtin0     dtin1     dtin2     dtin3                                  | TC
  utxd0     urxd0     urts0*    ucts0*                                 | UA
  utxd1     urxd1     urts1*    ucts1*                                 | UB

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
dtin?, gpt? = potential analog output (PWM) pins (mV)
dtin?, gpt? = potential servo output (PWM) pins (cms)
dtin? = potential frequency output pins (Hz)
urxd? = potential uart input pins (received byte)
utxd? = potential uart output pins (transmit byte)
       ^ - error
clone cable:
  master           slave
  ---------        ----------------
  qspi_clk         qspi_clk (ezpck)
  qspi_din         qspi_dout (ezpq)
  qspi_dout        qspi_din (ezpd)
  qspi_cs0         rcon* (ezpcs*)
  pins clone_rst*  rsti*
  vss              vss
  vdd              vdd
connect <nodeid>              -- connect to MCU <nodeid> via zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  qspi_clk             spiclk
  qspi_din             miso
  qspi_dout            mosi
  irq4*                irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
... testing pins
Welcome to StickOS for Freescale MCF52233 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat dtin3
safemode* irq1*
qspi_cs* qspi_cs0
clone_rst* scl
zigflea_rst* gpt0
zigflea_attn* gpt1
zigflea_rxtxen an5
... testing jm commands
Welcome to StickOS for Freescale MCF52233 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
    ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
end
... testing ipaddress
Welcome to StickOS for Freescale MCF52233 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
dhcp
1.2.3.4
dhcp
... testing reset
Welcome to StickOS for Freescale MCF52233 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform MCF52259 ###
... testing help
Welcome to StickOS for Freescale MCF52252 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help variables
  help pins
  help board
  help clone
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF52252 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
clone [run]                   -- clone flash to slave MCU [and run]
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete [<line>][-][<line>]    -- delete program lines or <subname>
download <slave Hz>           -- download for relay to QSPI to EzPort
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list [<line>][-][<line>]      -- list program lines or <subname>
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile [<line>][-][<line>]   -- like list, but display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>]                 -- save code ram to flash memory
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
autorun [on|off]                  -- autorun (on reset) mode
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
sleep [on|off]                    -- debugger sleep mode
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
usbhost [on|off]                  -- USB host mode (on reset)
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*   clone_rst*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line> <statement>                     -- enter program line into code ram

assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[[n]] [as ...] [, ...]   -- dimension variables
end                                    -- end program
label <label>                          -- read/data label
let <variable> = <expression> [, ...]  -- assign variable
print ("string"|<expression>) [, ...]  -- print strings/expressions
qspi <variable> [, ...]                -- perform qspi I/O by reference
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code

for more information:
  help blocks
  help devices
  help expressions
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference
array variable indices start at 0; v[0] is the same as v

ram variables:
  dim <var>[[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables:
  nodeid    msecs     seconds   ticks     ticks_per_msec      (read-only)

for more information:
  help pins
pin names:
    0         1         2         3        4     5        6        7
  --------  --------- --------- -------- ----- -------- -------- ------+
  an0       an1       an2       an3      an4   an5      an6      an7   | AN
  scl       sda                                                        | AS
  gpt0      gpt1      gpt2      gpt3                                   | TA
            irq1*               irq3*          irq5*             irq7* | NQ
  qspi_dout qspi_din  qspi_clk  qspi_cs0       qspi_cs2 qspi_cs3       | QS
  dtin0     dtin1     dtin2     dtin3                                  | TC
  utxd0     urxd0     urts0*    ucts0*                                 | UA
  utxd1     urxd1     urts1*    ucts1*                                 | UB
  fec_col   fec_crs   fec_rxclk fec_rxd[0-3]                  fec_rxdv | TI
  fec_rxer  fec_txclk fec_txd[0-3]                   fec_txen fec_txer | TJ
  utxd2     urxd2     urts2*    ucts2*                                 | UC

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
dtin?, gpt? = potential analog output (PWM) pins (mV)
dtin?, gpt? = potential servo output (PWM) pins (cms)
dtin? = potential frequency output pins (Hz)
urxd? = potential uart input pins (received byte)
utxd? = potential uart output pins (transmit byte)
1  2  3  4  5  6  7  8  9  10 11 12    1  2  3  4  5  6  7  8  9  10 11 12

g  +  q  q  q  q  r  r  q  q  r  v     u  u  u  u  g  g  g  g  i  i  i  i
n  3  s  s  s  s  c  s  s  s  s  b     t  r  r  c  p  p  p  p  r  r  r  r
d  V  p  p  p  p  o  t  p  p  t  u     x  x  t  t  t  t  t  t  q  q  q  q
      i  i  i  i  n  i  i  i  o  s     d  d  s  s  0  1  2  3  1  3  5  7
      _  _  _  _  *  n  _  _  u        2  2  2  2              *  *  *  *
      c  d  d  c     *  c  c  t              *  *                        
      l  o  i  s        s  s  *                                          
      k  u  n  0        2  3                                             
         t                                                               

antenna                            MCU                                USB


      u  u        u  u                                                   
u  u  r  c  u  u  r  c  d  d  d  d                                       
t  r  t  t  t  r  t  t  t  t  t  t                                       
x  x  s  s  x  x  s  s  i  i  i  i     g  +  s  s  a  a  a  a  a  a  a  a
d  d  0  0  d  d  1  1  n  n  n  n     n  3  c  d  n  n  n  n  n  n  n  n
0  0  *  *  1  1  *  *  0  1  2  3     d  V  l  a  0  1  2  3  4  5  6  7

1  2  3  4  5  6  7  8  9  10 11 12    1  2  3  4  5  6  7  8  9  10 11 12
clone cable:
  master           slave
  ---------        ----------------
  qspi_clk         qspi_clk (ezpck)
  qspi_din         qspi_dout (ezpq)
  qspi_dout        qspi_din (ezpd)
  qspi_cs0         rcon* (ezpcs*)
  pins clone_rst*  rsti*
  vss              vss
  vdd              vdd
connect <nodeid>              -- connect to MCU <nodeid> via zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  qspi_clk             spiclk
  qspi_din             miso
  qspi_dout            mosi
  irq1*                irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
off
on
error -   ^
error -       ^
on
... testing pins
Welcome to StickOS for Freescale MCF52252 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat dtin3
safemode* irq5*
qspi_cs* qspi_cs0
clone_rst* scl
zigflea_rst* an2
zigflea_attn* an3
zigflea_rxtxen an5
... testing jm commands
Welcome to StickOS for Freescale MCF52252 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
    ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
end
... testing ipaddress
Welcome to StickOS for Freescale MCF52252 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
... testing reset
Welcome to StickOS for Freescale MCF52252 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform MCF5211 ###
... testing help
Welcome to StickOS for Freescale MCF5211 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help variables
  help pins
  help clone
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF5211 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
clone [run]                   -- clone flash to slave MCU [and run]
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete [<line>][-][<line>]    -- delete program lines or <subname>
download <slave Hz>           -- download for relay to QSPI to EzPort
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list [<line>][-][<line>]      -- list program lines or <subname>
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile [<line>][-][<line>]   -- like list, but display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>]                 -- save code ram to flash memory
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
autorun [on|off]                  -- autorun (on reset) mode
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
sleep [on|off]                    -- debugger sleep mode
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*   clone_rst*  zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line> <statement>                     -- enter program line into code ram

assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[[n]] [as ...] [, ...]   -- dimension variables
end                                    -- end program
label <label>                          -- read/data label
let <variable> = <expression> [, ...]  -- assign variable
print ("string"|<expression>) [, ...]  -- print strings/expressions
qspi <variable> [, ...]                -- perform qspi I/O by reference
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code

for more information:
  help blocks
  help devices
  help expressions
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference
array variable indices start at 0; v[0] is the same as v

ram variables:
  dim <var>[[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables:
  nodeid    msecs     seconds   ticks     ticks_per_msec      (read-only)

for more information:
  help pins
pin names:
    0         1         2         3        4     5        6        7
  --------  --------- --------- -------- ----- -------- -------- ------+
  an0       an1       an2       an3      an4   an5      an6      an7   | AN
  scl       sda                                                        | AS
  gpt0      gpt1      gpt2      gpt3                                   | TA
            irq1*                        irq4*                   irq7* | NQ
  qspi_dout qspi_din  qspi_clk  qspi_cs0       qspi_cs2 qspi_cs3       | QS
  dtin0     dtin1     dtin2     dtin3                                  | TC
  utxd0     urxd0     urts0*    ucts0*                                 | UA
  utxd1     urxd1     urts1*    ucts1*                                 | UB

all pins support general purpose digital input/output
an? = potential analog input pins (mV)
dtin?, gpt? = potential analog output (PWM) pins (mV)
dtin?, gpt? = potential servo output (PWM) pins (cms)
dtin? = potential frequency output pins (Hz)
urxd? = potential uart input pins (received byte)
utxd? = potential uart output pins (transmit byte)
       ^ - error
clone cable:
  master           slave
  ---------        ----------------
  qspi_clk         qspi_clk (ezpck)
  qspi_din         qspi_dout (ezpq)
  qspi_dout        qspi_din (ezpd)
  qspi_cs0         rcon* (ezpcs*)
  pins clone_rst*  rsti*
  vss              vss
  vdd              vdd
connect <nodeid>              -- connect to MCU <nodeid> via zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  qspi_clk             spiclk
  qspi_din             miso
  qspi_dout            mosi
  irq4*                irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
... testing pins
Welcome to StickOS for Freescale MCF5211 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat dtin3
safemode* irq4*
qspi_cs* qspi_cs0
clone_rst* scl
zigflea_rst* gpt0
zigflea_attn* gpt1
zigflea_rxtxen an5
... testing jm commands
Welcome to StickOS for Freescale MCF5211 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
    ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
end
... testing ipaddress
Welcome to StickOS for Freescale MCF5211 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
... testing reset
Welcome to StickOS for Freescale MCF5211 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform MCF51JM128 ###
... testing help
Welcome to StickOS for Freescale MCF51JM128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF51JM128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete [<line>][-][<line>]    -- delete program lines or <subname>
download <slave Hz>           -- download for relay to QSPI to EzPort
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list [<line>][-][<line>]      -- list program lines or <subname>
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile [<line>][-][<line>]   -- like list, but display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>]                 -- save code ram to flash memory
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
autorun [on|off]                  -- autorun (on reset) mode
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
sleep [on|off]                    -- debugger sleep mode
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*   zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line> <statement>                     -- enter program line into code ram

assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[[n]] [as ...] [, ...]   -- dimension variables
end                                    -- end program
label <label>                          -- read/data label
let <variable> = <expression> [, ...]  -- assign variable
print ("string"|<expression>) [, ...]  -- print strings/expressions
qspi <variable> [, ...]                -- perform qspi I/O by reference
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code

for more information:
  help blocks
  help devices
  help expressions
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference
array variable indices start at 0; v[0] is the same as v

ram variables:
  dim <var>[[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables:
  nodeid    msecs     seconds   ticks     ticks_per_msec      (read-only)

for more information:
  help pins
pin names:
    0       1       2       3       4       5       6       7
  ------- ------- ------- ------- ------- ------- ------- --------+
  pta0    pta1    pta2    pta3    pta4    pta5                    | PORT A
  ptb0    ptb1    ptb2    ptb3    ptb4    ptb5    ptb6    ptb7    | PORT B
  ptc0    ptc1    ptc2    ptc3    ptc4    ptc5    ptc6            | PORT C
  ptd0    ptd1    ptd2    ptd3    ptd4    ptd5    ptd6    ptd7    | PORT D
  pte0    pte1    pte2    pte3    pte4    pte5    pte6    pte7    | PORT E
  ptf0    ptf1    ptf2    ptf3    ptf4    ptf5    ptf6    ptf7    | PORT F
  ptg0    ptg1    ptg2    ptg3                                    | PORT G

all pins support general purpose digital input/output
ptb?, ptd[0134] = potential analog input pins (mV)
pte[23], ptf[0-5] = potential analog output (PWM) pins (mV)
pte[23], ptf[0-5] = potential servo output (PWM) pins (cms)
pte[23], ptf[0-5] = potential frequency output pins (Hz)
pte1 (u1), ptc5 (u2) = potential uart input pins (received byte)
pte0 (u1), ptc3 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  spsck1 (pte6)        spiclk
  miso1 (pte4)         miso
  mosi1 (pte5)         mosi
  irq*                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
... testing pins
Welcome to StickOS for Freescale MCF51JM128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat ptf0
safemode* ptg0
qspi_cs* pte7
clone_rst* none
zigflea_rst* pte2
zigflea_attn* pte3
zigflea_rxtxen ptb5
... testing jm commands
Welcome to StickOS for Freescale MCF51JM128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
    ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
end
... testing ipaddress
Welcome to StickOS for Freescale MCF51JM128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
... testing reset
Welcome to StickOS for Freescale MCF51JM128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform MCF51QE128 ###
... testing help
Welcome to StickOS for Freescale MCF51QE128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF51QE128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete [<line>][-][<line>]    -- delete program lines or <subname>
download <slave Hz>           -- download for relay to QSPI to EzPort
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list [<line>][-][<line>]      -- list program lines or <subname>
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile [<line>][-][<line>]   -- like list, but display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>]                 -- save code ram to flash memory
undo                          -- undo code changes since last save
upgrade                       -- upgrade StickOS firmware!
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
autorun [on|off]                  -- autorun (on reset) mode
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
sleep [on|off]                    -- debugger sleep mode
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*   zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line> <statement>                     -- enter program line into code ram

assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[[n]] [as ...] [, ...]   -- dimension variables
end                                    -- end program
label <label>                          -- read/data label
let <variable> = <expression> [, ...]  -- assign variable
print ("string"|<expression>) [, ...]  -- print strings/expressions
qspi <variable> [, ...]                -- perform qspi I/O by reference
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code

for more information:
  help blocks
  help devices
  help expressions
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference
array variable indices start at 0; v[0] is the same as v

ram variables:
  dim <var>[[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables:
  nodeid    msecs     seconds   ticks     ticks_per_msec      (read-only)

for more information:
  help pins
pin names:
    0       1       2       3       4       5       6       7
  ------- ------- ------- ------- ------- ------- ------- --------+
  pta0    pta1    pta2    pta3    pta4    pta5    pta6    pta7    | PORT A
  ptb0    ptb1    ptb2    ptb3    ptb4    ptb5    ptb6    ptb7    | PORT B
  ptc0    ptc1    ptc2    ptc3    ptc4    ptc5    ptc6    ptc7    | PORT C
  ptd0    ptd1    ptd2    ptd3    ptd4    ptd5    ptd6    ptd7    | PORT D
  pte0    pte1    pte2    pte3    pte4    pte5    pte6    pte7    | PORT E
  ptf0    ptf1    ptf2    ptf3    ptf4    ptf5    ptf6    ptf7    | PORT F
  ptg0    ptg1    ptg2    ptg3                                    | PORT G

all pins support general purpose digital input/output
pta[0-367], ptb[0-3], ptf[0-7], ptg[23] = potential analog input pins (mV)
pta[0167], ptb[45], ptc[0-5] = potential analog output (PWM) pins (mV)
pta[0167], ptb[45], ptc[0-5] = potential servo output (PWM) pins (cms)
pta[0167], ptb[45], ptc[0-5] = potential frequency output pins (Hz)
ptb0 (u1), ptc6 (u2) = potential uart input pins (received byte)
ptb1 (u1), ptc7 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  spsck1 (ptb2)        spiclk
  miso1 (ptb4)         miso
  mosi1 (ptb3)         mosi
  irq*                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
... testing pins
Welcome to StickOS for Freescale MCF51QE128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat ptc2
safemode* pta2
qspi_cs* ptb5
clone_rst* none
zigflea_rst* ptc0
zigflea_attn* ptc1
zigflea_rxtxen ptf1
... testing jm commands
Welcome to StickOS for Freescale MCF51QE128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
    ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
     ^ - error
end
... testing ipaddress
Welcome to StickOS for Freescale MCF51QE128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
... testing reset
Welcome to StickOS for Freescale MCF51QE128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com

### platform BADGE_BOARD ###
... testing help
Welcome to StickOS for Freescale MCF51JM128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
for more information:
  help about
  help commands
  help modes
  help statements
  help blocks
  help devices
  help expressions
  help variables
  help pins
  help zigflea

see also:
  http://www.cpustick.com
Welcome to StickOS for Freescale MCF51JM128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
auto <line>                   -- automatically number program lines
clear [flash]                 -- clear ram [and flash] variables
cls                           -- clear terminal screen
cont [<line>]                 -- continue program from stop
delete [<line>][-][<line>]    -- delete program lines or <subname>
download <slave Hz>           -- download for relay to QSPI to EzPort
dir                           -- list saved programs
edit <line>                   -- edit program line
help [<topic>]                -- online help
list [<line>][-][<line>]      -- list program lines or <subname>
load <name>                   -- load saved program
memory                        -- print memory usage
new                           -- erase code ram and flash memories
profile [<line>][-][<line>]   -- like list, but display profile info
purge <name>                  -- purge saved program
renumber [<line>]             -- renumber program lines (and save)
reset                         -- reset the MCU!
run [<line>]                  -- run program
save [<name>]                 -- save code ram to flash memory
undo                          -- undo code changes since last save
uptime                        -- print time since last reset

for more information:
  help modes
analog [<millivolts>]             -- set/display analog voltage scale
autorun [on|off]                  -- autorun (on reset) mode
echo [on|off]                     -- terminal echo mode
indent [on|off]                   -- listing indent mode
nodeid [<nodeid>|none]            -- set/display zigflea nodeid
numbers [on|off]                  -- listing line numbers mode
pins [<assign> [<pinname>|none]]  -- set/display StickOS pin assignments
prompt [on|off]                   -- terminal prompt mode
servo [<Hz>]                      -- set/display servo Hz (on reset)
sleep [on|off]                    -- debugger sleep mode
step [on|off]                     -- debugger single-step mode
trace [on|off]                    -- debugger trace mode
watchsmart [on|off]               -- low-overhead watchpoint mode

pin assignments:
  heartbeat  safemode*
  qspi_cs*   zigflea_rst*  zigflea_attn*  zigflea_rxtxen

for more information:
  help pins
<line> <statement>                     -- enter program line into code ram

assert <expression>                    -- break if expression is false
data <n> [, ...]                       -- read-only data
dim <variable>[[n]] [as ...] [, ...]   -- dimension variables
end                                    -- end program
jm(clear|set) <r>, <c>                 -- clear/set row/column of LED matrix
jmscroll ...                           -- scroll printout to LED matrix
label <label>                          -- read/data label
let <variable> = <expression> [, ...]  -- assign variable
print ("string"|<expression>) [, ...]  -- print strings/expressions
qspi <variable> [, ...]                -- perform qspi I/O by reference
read <variable> [, ...]                -- read read-only data into variables
rem <remark>                           -- remark
restore [<label>]                      -- restore read-only data pointer
sleep <expression> (s|ms|us)           -- delay program execution
stop                                   -- insert breakpoint in code

for more information:
  help blocks
  help devices
  help expressions
  help variables
if <expression> then
[elseif <expression> then]
[else]
endif

for <variable> = <expression> to <expression> [step <expression>]
  [(break|continue) [n]]
next

while <expression> do
  [(break|continue) [n]]
endwhile

do
  [(break|continue) [n]]
until <expression>

gosub <subname> [<expression>, ...]

sub <subname> [<param>, ...]
  [return]
endsub
timers:
  configure timer <n> for <n> (s|ms|us)
  on timer <n> do <statement>                -- on timer execute statement
  off timer <n>                              -- disable timer interrupt
  mask timer <n>                             -- mask/hold timer interrupt
  unmask timer <n>                           -- unmask timer interrupt

uarts:
  configure uart <n> for <n> baud <n> data (even|odd|no) parity [loopback]
  on uart <n> (input|output) do <statement>  -- on uart execute statement
  off uart <n> (input|output)                -- disable uart interrupt
  mask uart <n> (input|output)               -- mask/hold uart interrupt
  unmask uart <n> (input|output)             -- unmask uart interrupt

watchpoints:
  on <expression> do <statement>             -- on expr execute statement
  off <expression>                           -- disable expr watchpoint
  mask <expression>                          -- mask/hold expr watchpoint
  unmask <expression>                        -- unmask expr watchpoint
the following operators are supported as in C,
in order of decreasing precedence:
  <n>                       -- decimal constant
  0x<n>                     -- hexadecimal constant
  <variable>                -- simple variable
  <variable>[<expression>]  -- array variable element
  (   )                     -- grouping
  !   ~                     -- logical not, bitwise not
  *   /   %                 -- times, divide, mod
  +   -                     -- plus, minus
  >>  <<                    -- shift right, left
  <=  <  >=  >              -- inequalities
  ==  !=                    -- equal, not equal
  |   ^   &                 -- bitwise or, xor, and
  ||  ^^  &&                -- logical or, xor, and
for more information:
  help variables
all variables must be dimensioned!
variables dimensioned in a sub are local to that sub
simple variables are passed to sub params by reference
array variable indices start at 0; v[0] is the same as v

ram variables:
  dim <var>[[n]]
  dim <var>[[n]] as (byte|short)

absolute variables:
  dim <var>[[n]] [as (byte|short)] at address <addr>

flash parameter variables:
  dim <varflash>[[n]] as flash

pin alias variables:
  dim <varpin> as pin <pinname> for (digital|analog|servo|frequency|uart) \
                                      (input|output) \
                                      [debounced] [inverted] [open_drain]

system variables:
  nodeid    msecs     seconds   ticks     ticks_per_msec      (read-only)

for more information:
  help pins
pin names:
    0       1       2       3       4       5       6       7
  ------- ------- ------- ------- ------- ------- ------- --------+
  pta0    pta1    pta2    pta3    pta4    pta5                    | PORT A
  ptb0    ptb1    ptb2    ptb3    ptb4    ptb5    ptb6    ptb7    | PORT B
  ptc0    ptc1    ptc2    ptc3    ptc4    ptc5    ptc6            | PORT C
  ptd0    ptd1    ptd2    ptd3    ptd4    ptd5    ptd6    ptd7    | PORT D
  pte0    pte1    pte2    pte3    pte4    pte5    pte6    pte7    | PORT E
  ptf0    ptf1    ptf2    ptf3    ptf4    ptf5    ptf6    ptf7    | PORT F
  ptg0    ptg1    ptg2    ptg3                                    | PORT G

all pins support general purpose digital input/output
ptb?, ptd[0134] = potential analog input pins (mV)
pte[23], ptf[0-5] = potential analog output (PWM) pins (mV)
pte[23], ptf[0-5] = potential servo output (PWM) pins (cms)
pte[23], ptf[0-5] = potential frequency output pins (Hz)
pte1 (u1), ptc5 (u2) = potential uart input pins (received byte)
pte0 (u1), ptc3 (u2) = potential uart output pins (transmit byte)
       ^ - error
       ^ - error
connect <nodeid>              -- connect to MCU <nodeid> via zigflea

remote node variables:
  dim <varremote>[[n]] as remote on nodeid <nodeid>

zigflea cable:
  MCU                  MC1320X
  -------------        -----------
  spsck1 (pte6)        spiclk
  miso1 (pte4)         miso
  mosi1 (pte5)         mosi
  irq*                 irq*
  pins qspi_cs*        ce*
  pins zigflea_rst*    rst*
  pins zigflea_rxtxen  rxtxen
  vss                  vss
  vdd                  vdd
test usb host
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
... testing pins
Welcome to StickOS for Freescale MCF51JM128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
heartbeat ptf0
safemode* ptg0
qspi_cs* pte7
clone_rst* none
zigflea_rst* pte2
zigflea_attn* pte3
zigflea_rxtxen ptb5
... testing jm commands
Welcome to StickOS for Freescale MCF51JM128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
error -     ^
error -               ^
error -      ^
error -       ^
error -        ^
error -         ^
  10 jmscroll "hello"
  20 jmset 1, 2
  30 jmclear 3, 4
end
hello
... testing ipaddress
Welcome to StickOS for Freescale MCF51JM128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
  ^ - error
  ^ - error
  ^ - error
  ^ - error
  ^ - error
... testing reset
Welcome to StickOS for Freescale MCF51JM128 v1.72!
Copyright (c) 2008-2009; all rights reserved.
http://www.cpustick.com
support@cpustick.com
