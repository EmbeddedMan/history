# Sample Linker Command File for CodeWarrior for ColdFire

# Memory ranges	

MEMORY {
   page0       (RX)  : ORIGIN = 0x00000000, LENGTH = 0x00000800
   page1       (RX)  : ORIGIN = 0x00000800, LENGTH = 0x00000800
   code        (RX)  : ORIGIN = 0x00001000, LENGTH = 0x0003f000
   bdtram      (RWX) : ORIGIN = 0x20000000, LENGTH = 0x00000100
   userram     (RWX) : ORIGIN = 0x20000100, LENGTH = 0x00007f00
}

SECTIONS {
# Heap and Stack sizes definition
	___stack_size     = 0x0a00;

# MCF52221 Derivative Memory map definitions from linker command files:
# __IPSBAR, __RAMBAR, __RAMBAR_SIZE, __FLASHBAR, __FLASHBAR_SIZE linker
# symbols must be defined in the linker command file.

# Memory Mapped Registers (IPSBAR= 0x40000000)
   ___IPSBAR         = 0x40000000;

# 16 Kbytes Internal SRAM
   ___RAMBAR         = 0x20000000;
   ___RAMBAR_SIZE    = 0x00008000;

# 128 KByte Internal Flash Memory
   ___FLASHBAR       = 0x00000000;
   ___FLASHBAR_SIZE  = 0x00040000;

   # N.B. this is here so it doesn't change and cause an incompatible upgrade
   ___SP_AFTER_RESET = ___RAMBAR + ___RAMBAR_SIZE - 4;
   
  .userram	  : {} > userram		
  .code	    : {} > code		
  .bdtram	: {} > bdtram			
	
	.page0 :
	{
		*(.page0)
		. = ALIGN (0x4); 
	} > page0

	.page1 :
	{
		*(.page1)
		. = ALIGN (0x4); 
	} > page1

	.text :
	{
		*(.text)
		. = ALIGN (0x4);
		*(.rodata)
		. = ALIGN (0x4);		
		___ROM_AT = .;
		___DATA_ROM = .;
	} >> code

	.data : AT(___ROM_AT) 
	{  
	    # N.B. this is here so it doesn't change and cause an incompatible upgrade
		__SDA_BASE = .;

		___DATA_RAM = .;
		. = ALIGN(0x4);
		___sinit__ = .;
	    STATICINIT
	    
		__START_DATA = .;
		*(.data)
		. = ALIGN (0x4);
		__END_DATA = .;

		__START_SDATA = .;
		*(.sdata)
		. = ALIGN (0x4);
		__END_SDATA = .;

		___DATA_END = .;
		. = ALIGN (0x4);
	} >> userram

	.bss :
	{
		___BSS_START = .;
		__START_SBSS = .;
		*(.sbss)
		. = ALIGN (0x4);
		*(SCOMMON)
		__END_SBSS = .;

		__START_BSS = .;
		*(.bss)
		. = ALIGN (0x4);
		*(COMMON)
		__END_BSS = .;
		___BSS_END = .;

		. = ALIGN(0x4);

		___SP_END		= .;
		.               = . + ___stack_size;
		___SP_INIT		= .;
		.               = .+4;
		___HEAP_START	= .;
		___HEAP_END		= ___RAMBAR + ___RAMBAR_SIZE;

		. = ALIGN (0x4);
	} >> userram

	___heap_addr = ___HEAP_START;
	___heap_size = (___HEAP_END - ___HEAP_START - 4) & 0x0FFFFF00;
	___STACK_SIZE = ___SP_INIT - ___SP_END;
	  	
	___BDT_RAM		= ADDR(.bdtram);
	___BDT_RAM_END  = ADDR(.userram);
	
	__SP_INIT		= ___SP_INIT;

}

