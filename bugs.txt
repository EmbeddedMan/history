editing a line with a // comment drops the comment!!!

is "reset" broken on 5225x?

should everybody use 2 stop bits?

update user's guide to indicate keychar and getchar automatically reset to 0 after they are read.

# on string should still return max len -- @ should return consumed length!

add "lcd init" statement...  set rs = 0 at end of write nibble...

add "configure qspi mode (0-3)"

disable kbd pins for fb32 nano/mini

eliminate restrictions on "analog" mode values.  "servo", too?

try to process lines with \n or \r (but not both), to make it possible to paste in unix line endings into tera term

can we allocate more ram to pic32/5225x (ram page size)?  how close are we?

add help for uno32 LED on pin 43

add help to all mcus for spi/i2c pin usage

add packed save/load commands!!!

add fslbot example to user's guide?


1. Personal preference, but it would be nice if variable names could 
start with an underscore "_", as subroutines can.  This would be useful 
for naming variables assigned to inverted logic pins.

2. I think it would be awesome if the timer functions could take a 
variable (or expression) rather than simply 0-n.  This would make it a 
lot easier to keep track of timers in code.


I need to add real support ("configure qspi ...") to set the clock polarity in BASIC.

I might as well add the baud rate there, too.

And do the same for i2c.



// prior 1
// =======
// "trace on" should not trace input or halt statements
// I should probably allow "as byte" or "as word" on pin variables, but I don't currently.
// get rid of parse2/run2/basic0 if we make stickos source public?
// add to help pins all "unchangable" pins (i2c, spi, etc.) from freescale.pdf and microchip.pdf
// add ability to call subs in "library" BASIC program; ability to chain basic programs.
// fix checksum to be compatible/consistent with bootloader (pic32 and freescale)
// pins should survive upgrade
// do we want BASIC to have control over pull-ups?  thru a mode variable?
// make sure if pins safemode* none is set that we cannot autorun!
// why does jm upgrade show diff cecksum (by 0x5a?) than program from cw?
// multi-pin variables (digital I/O only, using binary integer)!!!
// I should probably allow "as byte" or "as word" on pin variables, but I don't currently.
// pasting into an edited line doesn't work!  echo buffer overflow!
// add getchar example in ug?
// generate skeleton with HIDBL commented out!
// make flash filesystem allocate only as much space as is needed to save a current program!
// mode to disable usb device (and autorun disable to override)
// move block.c and fat32.c from pict-o-crypt to sources (include in skeleton)
// on/off/mask/unmask should move to parse2.c/run2.c
// 9s12 and others need to reset timer counter when increasing frequency output -- see "wrap"
// add qspi pin assignments to online help (data, clk, cs)
// Ctrl-E to dump all variables while basic program is running?
// add a faster zigflea option for pic32/5225x!
// with no pullups, i2c will crash
// test i2c with sda, scl, sda and acl all tied to ground -- no hangs or crashes.

// doc
// ===
// change VBUS to +5V in schematic
// add digital input and analog output example
// add minimum flash requirements for pic32 and 5225x to mcu details
// document "conflicting timer usage"
// MCU details says "autorun disable", but we are inconsistent in docs with use of "safemode*"

// prior 2
// =======
// fgure out a clean way for spi/i2c to steal pins
// expose erase_page and write_word to basic to manipulate other half of flash!
// allow input of negative numbers
// give vprint ability to do sign extension?
// add configurable file name for usb host mode
// consider doing servos in sw w/ lightweight isr rather than using hw timers
// add "modes" to turn off USB and QSPI and get their pins back for gpio
// saw bug changing pic32 pin from servo to freq mode on fly?
// add demokit skeleton
// attempt to decouple servo pwm from frequency -- 256 should be 2.56ms independent of Hz!
//   9s12 and cfv2 can do 4 16 bit channels!
// spi-to-sd card data logging
// how to enable different uart selection (other than lowest number) for console?
// gets warnings
// permanent params (protected from upgrade) for nodeid, ipaddress, etc.
// zigbee read remote variables
// we need a way to prevent you from upgrading the wrong firmware file!!!
// if data area of flash looks bogus on boot, we should clear it all!
// have nodeid and clusterid, and broadcast 0x4242 and clusterid as magic number
// save zigbee channel in nvparam!
// need a second catalog page for safe updates!
// handle uart errors (interrupt as well as poll)

// prior 3
// =======
// PC/Cell framework!!!
// add mst interface for basic progs and fw access, also inf file access
// add zigbee support thru xbee for ubw32?
// prompt on|off|ok
// get rid of remaining SPL_USB, SPL_IRQ4, etc.
// get rid of rtc isr remap on jm/qe
// if dhcp not found on 33, assign random ip compatible with windows?
// figure out usb "pop" on first badge run -- is that the badge issue?

// prior 4
// =======
// can we make sub/endsub block behave more like for/next, from error and listing perspective?
// allow broadcast/remote nodeid setting (with switch), like pagers
// short circuit && and || operators
// multiple (main) threads?
// "on usb [connect|disconnect]" statement for slave mode!
// ?: operator!
// add support for comments at the end of lines '?  //?
// switch statement (on xxx goto...?)
// allow gosub from command line?
// sub stack trace?  (with sub local vars?)
// one line "if <expression> then <statement> [else <statement>]"
// optional "let" statement
// sleeps and timers don't work with single-stepping
// core dump -- copy ram to secondary code flash on assert/exception/halt?

// v2.0
// ====
// generic programmable i2c/spi/uart/ethernet/cdc (host and device) gateway
// make console virtual uart a first class citizen!!!
// separate os from stickos; allow non 50/50 flash split
// allow basic isrs to run while waiting for uart or i2c receive data (anywhere we allow ctrl-c)
// separate os from stickos; allow non 50/50 flash split
// turn stickos into a generic programmable uart/usbcdc/ethernet/spi/i2c gateway
// get rid of basic0/basic2, parse0/parse2, run0/run2, etc. -- save lots of code!  release core source???
// handle all uart rx/tx in isrs; have basic statements feed isrs
// get rid of uart pin vars for pic32!  for all???

// perf
// ====
// mave var one slot towards "last in gosub scope" on usage rand()%16?
// can we skip statement execution more fully when run_condition is false?

// pcb
// ===
// battery holder
// pin offset for headers
// smt power switch and reset switch
// all diffs in PCBUNDO
// tp for pstclk
// Fill a bunch of copper to the U1 heat sink pad -- both sides would be helpful
// Break the solder mask below U1 to allow for it to better dissipate heat.
// U2 heat sinking as well?

ports
=====
stm32
avr32  EVK1104
MSP430 or Atmel XMega
lpc1758?  lpc2xxx?
pic24
9s12e
51ac/9s08ac

